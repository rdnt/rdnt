// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package github

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Autogenerated input type of ChangeUserStatus
type ChangeUserStatusInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	// The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
	Emoji *string `json:"emoji"`
	// If set, the user status will not be shown after this date.
	ExpiresAt *time.Time `json:"expiresAt"`
	// Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
	LimitedAvailability *bool `json:"limitedAvailability"`
	// A short description of your current status.
	Message *string `json:"message"`
	// The ID of the organization whose members will be allowed to see the status. If
	// omitted, the status will be publicly visible.
	OrganizationId *string `json:"organizationId"`
}

// GetClientMutationId returns ChangeUserStatusInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetClientMutationId() *string { return v.ClientMutationId }

// GetEmoji returns ChangeUserStatusInput.Emoji, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetEmoji() *string { return v.Emoji }

// GetExpiresAt returns ChangeUserStatusInput.ExpiresAt, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetLimitedAvailability returns ChangeUserStatusInput.LimitedAvailability, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetLimitedAvailability() *bool { return v.LimitedAvailability }

// GetMessage returns ChangeUserStatusInput.Message, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetMessage() *string { return v.Message }

// GetOrganizationId returns ChangeUserStatusInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetOrganizationId() *string { return v.OrganizationId }

// __changeUserStatusInput is used internally by genqlient
type __changeUserStatusInput struct {
	Status ChangeUserStatusInput `json:"status"`
}

// GetStatus returns __changeUserStatusInput.Status, and is useful for accessing the field via an interface.
func (v *__changeUserStatusInput) GetStatus() ChangeUserStatusInput { return v.Status }

// __contributionsViewInput is used internally by genqlient
type __contributionsViewInput struct {
	Username string    `json:"username"`
	From     time.Time `json:"from"`
	To       time.Time `json:"to"`
}

// GetUsername returns __contributionsViewInput.Username, and is useful for accessing the field via an interface.
func (v *__contributionsViewInput) GetUsername() string { return v.Username }

// GetFrom returns __contributionsViewInput.From, and is useful for accessing the field via an interface.
func (v *__contributionsViewInput) GetFrom() time.Time { return v.From }

// GetTo returns __contributionsViewInput.To, and is useful for accessing the field via an interface.
func (v *__contributionsViewInput) GetTo() time.Time { return v.To }

// __userInfoInput is used internally by genqlient
type __userInfoInput struct {
	Username string `json:"username"`
}

// GetUsername returns __userInfoInput.Username, and is useful for accessing the field via an interface.
func (v *__userInfoInput) GetUsername() string { return v.Username }

// changeUserStatusChangeUserStatusChangeUserStatusPayload includes the requested fields of the GraphQL type ChangeUserStatusPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of ChangeUserStatus
type changeUserStatusChangeUserStatusChangeUserStatusPayload struct {
	// Your updated status.
	Status *changeUserStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus `json:"status"`
}

// GetStatus returns changeUserStatusChangeUserStatusChangeUserStatusPayload.Status, and is useful for accessing the field via an interface.
func (v *changeUserStatusChangeUserStatusChangeUserStatusPayload) GetStatus() *changeUserStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus {
	return v.Status
}

// changeUserStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus includes the requested fields of the GraphQL type UserStatus.
// The GraphQL type's documentation follows.
//
// The user's description of what they're currently doing.
type changeUserStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus struct {
	Id string `json:"id"`
}

// GetId returns changeUserStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus.Id, and is useful for accessing the field via an interface.
func (v *changeUserStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus) GetId() string {
	return v.Id
}

// changeUserStatusResponse is returned by changeUserStatus on success.
type changeUserStatusResponse struct {
	// Update your status on GitHub.
	ChangeUserStatus *changeUserStatusChangeUserStatusChangeUserStatusPayload `json:"changeUserStatus"`
}

// GetChangeUserStatus returns changeUserStatusResponse.ChangeUserStatus, and is useful for accessing the field via an interface.
func (v *changeUserStatusResponse) GetChangeUserStatus() *changeUserStatusChangeUserStatusChangeUserStatusPayload {
	return v.ChangeUserStatus
}

// contributionsViewResponse is returned by contributionsView on success.
type contributionsViewResponse struct {
	// Lookup a user by login.
	User *contributionsViewUser `json:"user"`
}

// GetUser returns contributionsViewResponse.User, and is useful for accessing the field via an interface.
func (v *contributionsViewResponse) GetUser() *contributionsViewUser { return v.User }

// contributionsViewUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type contributionsViewUser struct {
	// The collection of contributions this user has made to different repositories.
	ContributionsCollection contributionsViewUserContributionsCollection `json:"contributionsCollection"`
}

// GetContributionsCollection returns contributionsViewUser.ContributionsCollection, and is useful for accessing the field via an interface.
func (v *contributionsViewUser) GetContributionsCollection() contributionsViewUserContributionsCollection {
	return v.ContributionsCollection
}

// contributionsViewUserContributionsCollection includes the requested fields of the GraphQL type ContributionsCollection.
// The GraphQL type's documentation follows.
//
// A contributions collection aggregates contributions such as opened issues and commits created by a user.
type contributionsViewUserContributionsCollection struct {
	// How many commits were made by the user in this time span.
	TotalCommitContributions int `json:"totalCommitContributions"`
	// How many issues the user opened.
	TotalIssueContributions int `json:"totalIssueContributions"`
	// How many pull requests the user opened.
	TotalPullRequestContributions int `json:"totalPullRequestContributions"`
	// How many pull request reviews the user left.
	TotalPullRequestReviewContributions int `json:"totalPullRequestReviewContributions"`
	// A count of contributions made by the user that the viewer cannot access. Only
	// non-zero when the user has chosen to share their private contribution counts.
	RestrictedContributionsCount int `json:"restrictedContributionsCount"`
	// A calendar of this user's contributions on GitHub.
	ContributionCalendar contributionsViewUserContributionsCollectionContributionCalendar `json:"contributionCalendar"`
}

// GetTotalCommitContributions returns contributionsViewUserContributionsCollection.TotalCommitContributions, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollection) GetTotalCommitContributions() int {
	return v.TotalCommitContributions
}

// GetTotalIssueContributions returns contributionsViewUserContributionsCollection.TotalIssueContributions, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollection) GetTotalIssueContributions() int {
	return v.TotalIssueContributions
}

// GetTotalPullRequestContributions returns contributionsViewUserContributionsCollection.TotalPullRequestContributions, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollection) GetTotalPullRequestContributions() int {
	return v.TotalPullRequestContributions
}

// GetTotalPullRequestReviewContributions returns contributionsViewUserContributionsCollection.TotalPullRequestReviewContributions, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollection) GetTotalPullRequestReviewContributions() int {
	return v.TotalPullRequestReviewContributions
}

// GetRestrictedContributionsCount returns contributionsViewUserContributionsCollection.RestrictedContributionsCount, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollection) GetRestrictedContributionsCount() int {
	return v.RestrictedContributionsCount
}

// GetContributionCalendar returns contributionsViewUserContributionsCollection.ContributionCalendar, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollection) GetContributionCalendar() contributionsViewUserContributionsCollectionContributionCalendar {
	return v.ContributionCalendar
}

// contributionsViewUserContributionsCollectionContributionCalendar includes the requested fields of the GraphQL type ContributionCalendar.
// The GraphQL type's documentation follows.
//
// A calendar of contributions made on GitHub by a user.
type contributionsViewUserContributionsCollectionContributionCalendar struct {
	// Determine if the color set was chosen because it's currently Halloween.
	IsHalloween bool `json:"isHalloween"`
	// The count of total contributions in the calendar.
	TotalContributions int `json:"totalContributions"`
	// A list of the weeks of contributions in this calendar.
	Weeks []contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek `json:"weeks"`
}

// GetIsHalloween returns contributionsViewUserContributionsCollectionContributionCalendar.IsHalloween, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollectionContributionCalendar) GetIsHalloween() bool {
	return v.IsHalloween
}

// GetTotalContributions returns contributionsViewUserContributionsCollectionContributionCalendar.TotalContributions, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollectionContributionCalendar) GetTotalContributions() int {
	return v.TotalContributions
}

// GetWeeks returns contributionsViewUserContributionsCollectionContributionCalendar.Weeks, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollectionContributionCalendar) GetWeeks() []contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek {
	return v.Weeks
}

// contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek includes the requested fields of the GraphQL type ContributionCalendarWeek.
// The GraphQL type's documentation follows.
//
// A week of contributions in a user's contribution graph.
type contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek struct {
	// The days of contributions in this week.
	ContributionDays []contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay `json:"contributionDays"`
}

// GetContributionDays returns contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek.ContributionDays, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek) GetContributionDays() []contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay {
	return v.ContributionDays
}

// contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay includes the requested fields of the GraphQL type ContributionCalendarDay.
// The GraphQL type's documentation follows.
//
// Represents a single day of contributions on GitHub by a user.
type contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay struct {
	// How many contributions were made by the user on this day.
	ContributionCount int `json:"contributionCount"`
	// The hex color code that represents how many contributions were made on this day compared to others in the calendar.
	Color string `json:"color"`
}

// GetContributionCount returns contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.ContributionCount, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetContributionCount() int {
	return v.ContributionCount
}

// GetColor returns contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.Color, and is useful for accessing the field via an interface.
func (v *contributionsViewUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetColor() string {
	return v.Color
}

// userInfoResponse is returned by userInfo on success.
type userInfoResponse struct {
	// Lookup a user by login.
	User *userInfoUser `json:"user"`
}

// GetUser returns userInfoResponse.User, and is useful for accessing the field via an interface.
func (v *userInfoResponse) GetUser() *userInfoUser { return v.User }

// userInfoUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type userInfoUser struct {
	// The collection of contributions this user has made to different repositories.
	ContributionsCollection userInfoUserContributionsCollection `json:"contributionsCollection"`
	// A list of pull requests associated with this user.
	PullRequests userInfoUserPullRequestsPullRequestConnection `json:"pullRequests"`
	// A list of issues associated with this user.
	Issues userInfoUserIssuesIssueConnection `json:"issues"`
}

// GetContributionsCollection returns userInfoUser.ContributionsCollection, and is useful for accessing the field via an interface.
func (v *userInfoUser) GetContributionsCollection() userInfoUserContributionsCollection {
	return v.ContributionsCollection
}

// GetPullRequests returns userInfoUser.PullRequests, and is useful for accessing the field via an interface.
func (v *userInfoUser) GetPullRequests() userInfoUserPullRequestsPullRequestConnection {
	return v.PullRequests
}

// GetIssues returns userInfoUser.Issues, and is useful for accessing the field via an interface.
func (v *userInfoUser) GetIssues() userInfoUserIssuesIssueConnection { return v.Issues }

// userInfoUserContributionsCollection includes the requested fields of the GraphQL type ContributionsCollection.
// The GraphQL type's documentation follows.
//
// A contributions collection aggregates contributions such as opened issues and commits created by a user.
type userInfoUserContributionsCollection struct {
	// How many commits were made by the user in this time span.
	TotalCommitContributions int `json:"totalCommitContributions"`
	// A count of contributions made by the user that the viewer cannot access. Only
	// non-zero when the user has chosen to share their private contribution counts.
	RestrictedContributionsCount int `json:"restrictedContributionsCount"`
}

// GetTotalCommitContributions returns userInfoUserContributionsCollection.TotalCommitContributions, and is useful for accessing the field via an interface.
func (v *userInfoUserContributionsCollection) GetTotalCommitContributions() int {
	return v.TotalCommitContributions
}

// GetRestrictedContributionsCount returns userInfoUserContributionsCollection.RestrictedContributionsCount, and is useful for accessing the field via an interface.
func (v *userInfoUserContributionsCollection) GetRestrictedContributionsCount() int {
	return v.RestrictedContributionsCount
}

// userInfoUserIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Issue.
type userInfoUserIssuesIssueConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns userInfoUserIssuesIssueConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *userInfoUserIssuesIssueConnection) GetTotalCount() int { return v.TotalCount }

// userInfoUserPullRequestsPullRequestConnection includes the requested fields of the GraphQL type PullRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequest.
type userInfoUserPullRequestsPullRequestConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns userInfoUserPullRequestsPullRequestConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *userInfoUserPullRequestsPullRequestConnection) GetTotalCount() int { return v.TotalCount }

// The query or mutation executed by changeUserStatus.
const changeUserStatus_Operation = `
mutation changeUserStatus ($status: ChangeUserStatusInput!) {
	changeUserStatus(input: $status) {
		status {
			id
		}
	}
}
`

func changeUserStatus(
	ctx context.Context,
	client graphql.Client,
	status ChangeUserStatusInput,
) (*changeUserStatusResponse, error) {
	req := &graphql.Request{
		OpName: "changeUserStatus",
		Query:  changeUserStatus_Operation,
		Variables: &__changeUserStatusInput{
			Status: status,
		},
	}
	var err error

	var data changeUserStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by contributionsView.
const contributionsView_Operation = `
query contributionsView ($username: String!, $from: DateTime!, $to: DateTime!) {
	user(login: $username) {
		contributionsCollection(from: $from, to: $to) {
			totalCommitContributions
			totalIssueContributions
			totalPullRequestContributions
			totalPullRequestReviewContributions
			restrictedContributionsCount
			contributionCalendar {
				isHalloween
				totalContributions
				weeks {
					contributionDays {
						contributionCount
						color
					}
				}
			}
		}
	}
}
`

func contributionsView(
	ctx context.Context,
	client graphql.Client,
	username string,
	from time.Time,
	to time.Time,
) (*contributionsViewResponse, error) {
	req := &graphql.Request{
		OpName: "contributionsView",
		Query:  contributionsView_Operation,
		Variables: &__contributionsViewInput{
			Username: username,
			From:     from,
			To:       to,
		},
	}
	var err error

	var data contributionsViewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by userInfo.
const userInfo_Operation = `
query userInfo ($username: String!) {
	user(login: $username) {
		contributionsCollection {
			totalCommitContributions
			restrictedContributionsCount
		}
		pullRequests {
			totalCount
		}
		issues {
			totalCount
		}
	}
}
`

func userInfo(
	ctx context.Context,
	client graphql.Client,
	username string,
) (*userInfoResponse, error) {
	req := &graphql.Request{
		OpName: "userInfo",
		Query:  userInfo_Operation,
		Variables: &__userInfoInput{
			Username: username,
		},
	}
	var err error

	var data userInfoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
